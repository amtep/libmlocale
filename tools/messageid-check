#! /usr/bin/perl -w                        # -*- mode: perl coding: utf-8 -*-
########################################################################

use strict;
use utf8;
use locale;
use POSIX qw(locale_h);
use POSIX qw(strftime);
use Encode 'from_to','encode_utf8','decode_utf8';
use English;
use Getopt::Long;
use File::Path;
use XML::Parser;
use Data::Dumper;

binmode STDIN,  ":utf8";
binmode STDOUT, ":utf8";
binmode STDERR, ":utf8";

#----------------------------------------------------------------------
# global variables

my $version = "0.20100315";

my $original_wd;
chomp ($original_wd = `pwd`);

my @handoffFiles = ();
my %handoffXmlTrees = ();

my $totalNumberOfIdsNotFoundInSpec = 0;

my $OPT_VERBOSITY;
my $OPT_VERSION;
my $OPT_HELP;
my $OPT_EEDIR;
my $OPT_HANDOFF_URL;
my $OPT_HANDOFF_DIR;
my $OPT_HTTP_USER;
my $OPT_HTTP_PASSWD;
my $OPT_SKIP_DOWNLOAD;
my $OPT_OUTPUTDIR;

# engineering English packages which should be ignored because they are obsolete:
my @eePackagesObsolete = (
    "libdui-l10n-engineering-english", # now "libmeegotouch-l10n-engineering-english"
    "duistartup-l10n-engineering-english" # now "mstartup-l10n-engineering-english"
    );

# engineering English packages which should be ignored because they are only demos:
my @eePackagesIgnore = (
    "meegotouch-demos-widgetsgallery-l10n-engineering-english"
    );

my @eePackages = (
                  "account-plugin-facebook-l10n-engineering-english",
                  "account-plugin-google-l10n-engineering-english",
                  "account-plugin-ovi-l10n-engineering-english",
                  "account-plugin-youtube-l10n-engineering-english",
                  "accounts-ui-l10n-engineering-english",
                  "backup-framework-l10n-engineering-english",
                  "call-history-l10n-engineering-english",
                  "call-ui-l10n-engineering-english",
                  "camera-ui-l10n-engineering-english",
                  "cellular-adaptation-ui-l10n-engineering-english",
                  "commhistory-daemon-l10n-engineering-english",
                  "conn-dui-bluetooth-l10n-engineering-english",
                  "conn-dui-cellular-l10n-engineering-english",
                  "conn-dui-internet-l10n-engineering-english",
                  "conn-dui-wlan-l10n-engineering-english",
                  "contacts-l10n-engineering-english",
                  "crash-reporter-l10n-engineering-english",
                  "dialer-l10n-engineering-english",
                  "duicontrolpanel-callandsimapplet-l10n-engineering-english",
                  "duicontrolpanel-certificatesapplet-l10n-engineering-english",
                  "duicontrolpanel-datetimeapplet-l10n-engineering-english",
                  "duicontrolpanel-displaylanguageapplet-l10n-engineering-english",
                  "duicontrolpanel-keyboardlanguageapplet-l10n-engineering-english",
                  "duicontrolpanel-l10n-engineering-english",
                  "duicontrolpanel-networkapplet-l10n-engineering-english",
                  "duicontrolpanel-regionformatapplet-l10n-engineering-english",
                  "duihelp-l10n-engineering-english",
                  "duihomescreen-l10n-engineering-english",
                  "duihomescreen-plugins-weatherapplet-l10n-engineering-english",
                  "duistatusind-connectivity-l10n-engineering-english",
                  "feedreader-l10n-engineering-english",
                  "gallery-l10n-engineering-english",
                  "keychain-ui-l10n-engineering-english",
                  "libdatacounterdialog-l10n-engineering-english",
                  "libdialerui-l10n-engineering-english",
                  "libfeedsettings-l10n-engineering-english",
                  "liblocationpicker-l10n-engineering-english",
                  "libmcontentwidgets-l10n-engineering-english",
                  "libmeegotouch-l10n-engineering-english",
                  "libpresence0-l10n-engineering-english",
                  "libshare-ui-l10n-engineering-english",
                  "libwebupload-l10n-engineering-english",
                  "me-l10n-engineering-english",
                  # ignore "meegotouch-demos-widgetsgallery-l10n-engineering-english",
                  "messaging-ui-l10n-engineering-english",
                  "mms-ui-l10n-engineering-english",
                  "mstartup-l10n-engineering-english",
                  "office-tools-l10n-engineering-english",
                  "package-manager-ui-l10n-engineering-english",
                  "signon-ui-l10n-engineering-english",
                  "systemui-applets-l10n-engineering-english",
                  "systemui-l10n-engineering-english",
                  "transfer-ui-l10n-engineering-english",
                  "webupload-engine-l10n-engineering-english"
                  );

my @eeFiles = (
               "/usr/share/l10n/meegotouch/accounts-ui.qm",
               # demo only "/usr/share/l10n/meegotouch/animatedlayout.qm", 
               "/usr/share/l10n/meegotouch/backup.qm",
               "/usr/share/l10n/meegotouch/call-history.qm",
               "/usr/share/l10n/meegotouch/call-ui.qm",
               # camera-ui is still in the old directory, will move soon
               "/usr/share/l10n/dui/camera-ui.qm",
               "/usr/share/l10n/meegotouch/celluid.qm",
               "/usr/share/l10n/meegotouch/commhistoryd.qm",
               "/usr/share/l10n/meegotouch/conn-dui-bluetooth.qm",
               "/usr/share/l10n/meegotouch/conn-dui-cellular.qm",
               "/usr/share/l10n/meegotouch/conn-dui-internet.qm",
               "/usr/share/l10n/meegotouch/conn-dui-wlan.qm",
               "/usr/share/l10n/meegotouch/contacts.qm",
               "/usr/share/l10n/meegotouch/duicontrolpanel-callandsim.qm",
               "/usr/share/l10n/meegotouch/duicontrolpanel-certificatesapplet.qm",
               "/usr/share/l10n/meegotouch/duicontrolpanel-datetime.qm",
               "/usr/share/l10n/meegotouch/duicontrolpanel-displaylanguage.qm",
               "/usr/share/l10n/meegotouch/duicontrolpanel-keyboardlanguage.qm",
               "/usr/share/l10n/meegotouch/duicontrolpanel-network.qm",
               "/usr/share/l10n/meegotouch/duicontrolpanel-regionformat.qm",
               "/usr/share/l10n/meegotouch/duicontrolpanel.qm",
               "/usr/share/l10n/meegotouch/duihelp.qm",
               "/usr/share/l10n/meegotouch/duihome.qm",
               # duistatusindicatormenu-connectivityplugin.qm is still in the old directory
               "/usr/share/l10n/dui/duistatusindicatormenu-connectivityplugin.qm",
               "/usr/share/l10n/meegotouch/facebookplugin.qm",
               "/usr/share/l10n/meegotouch/feeds.qm",
               "/usr/share/l10n/meegotouch/feedsettings.qm",
               "/usr/share/l10n/meegotouch/gallery.qm",
               "/usr/share/l10n/meegotouch/googleplugin.qm",
               "/usr/share/l10n/meegotouch/keychain-ui.qm",
               "/usr/share/l10n/meegotouch/libdatacounterdialog.qm",
               "/usr/share/l10n/meegotouch/libdialerui.qm",
               "/usr/share/l10n/meegotouch/liblocationpicker.qm",
               "/usr/share/l10n/meegotouch/libmcontentwidgets.qm",
               "/usr/share/l10n/meegotouch/libmeegotouch.qm",
               "/usr/share/l10n/meegotouch/libpresence0.qm",
               "/usr/share/l10n/meegotouch/libwebupload.qm",
               "/usr/share/l10n/meegotouch/libwebuploadpui.qm",
               "/usr/share/l10n/meegotouch/me.qm",
               "/usr/share/l10n/meegotouch/messaging-ui.qm",
               "/usr/share/l10n/meegotouch/mms-contacts-actions.qm",
               "/usr/share/l10n/meegotouch/mms-messaging-plugin.qm",
               "/usr/share/l10n/meegotouch/mms-settings.qm",
               "/usr/share/l10n/meegotouch/mms-share-plugin.qm",
               "/usr/share/l10n/meegotouch/mstartup.qm",
               "/usr/share/l10n/meegotouch/officetools.qm",
               "/usr/share/l10n/meegotouch/oviplugin.qm",
               "/usr/share/l10n/meegotouch/package-manager-ui.qm",
               "/usr/share/l10n/meegotouch/share-ui.qm",
               "/usr/share/l10n/meegotouch/signon-ui.qm",
               "/usr/share/l10n/meegotouch/systemui-applets.qm",
               "/usr/share/l10n/meegotouch/systemui.qm",
               "/usr/share/l10n/meegotouch/transfer-ui.qm",
               "/usr/share/l10n/meegotouch/weatherappletres.qm",
               "/usr/share/l10n/meegotouch/webupload-engine.qm",
               # demo only "/usr/share/l10n/meegotouch/widgetsgallery.qm",
               "/usr/share/l10n/meegotouch/youtubeplugin.qm"
               );

#----------------------------------------------------------------------
# subroutines:

sub usage {
  printf STDERR "Usage: photo-gallery [option] ...\n";
  printf STDERR "-v, --verbose           print some progress messages to standard output.\n";
  printf STDERR "    --version           display version and exit.\n";
  printf STDERR "-h, --help              display this help and exit.\n";
  printf STDERR "    --eedir             directory where the ee .qm files are.\n";
  printf STDERR "    --handoffurl        URL of the “handoff” .ts files.\n";
  printf STDERR "    --handoffdir        directory to save the “handoff” .ts files.\n";
  printf STDERR "    --http-user         user name to access the “handoff” .ts files.\n";
  printf STDERR "    --http-passwd       password to access the “handoff” .ts files.\n";
  printf STDERR "                        or use .netrc to store user name and password.\n";
  printf STDERR "    --skip-dowload      skip download.\n";
  printf STDERR "    --output-dir        directory to write the output files to.\n";
  printf STDERR "                        default is ./messageid-check-results/\n";
  exit 1;
}

sub mySystem {
  my ($command) = @_;
  if ($OPT_VERBOSITY >= 1) {
    print "executing: $command\n";
  }
  return system ($command);
}

sub myExit {
  my ($value) =@_;
  chdir $original_wd || die "Can’t cd to $original_wd: $!\n";
  exit ($value);
}

sub myBasename {
  my ($path) =@_;
  $path =~ /\/([^\/]+)$/; # basename (strip directory)
  return $1;
}

sub writeHtml {
  my ($htmlOutBody) =@_;
  my $date = decode_utf8(`date`);
  chomp($date);
  my $title = "Results of messageid-check (version $version) run on " . $date;

  my $htmlOutHeader = "";

  $htmlOutHeader .= sprintf "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n";
  $htmlOutHeader .= sprintf "<html>\n";
  $htmlOutHeader .= sprintf "<head>\n";
  $htmlOutHeader .= sprintf "<title>%s</title>\n", $title;
  $htmlOutHeader .= sprintf "<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n";
  $htmlOutHeader .= sprintf "<style type=\"text/css\">\n";
  $htmlOutHeader .= sprintf "body {\n";
  $htmlOutHeader .= sprintf "  color:#000000;\n";
  $htmlOutHeader .= sprintf "  background-color:#FFFFFF;\n";
  $htmlOutHeader .= sprintf "  font-family: sans-serif;\n";
  $htmlOutHeader .= sprintf "  font-size: 1em;\n";
  $htmlOutHeader .= sprintf "}\n";
  $htmlOutHeader .= sprintf ".okcolor {\n";
  $htmlOutHeader .= sprintf "  color:#00FF00;\n";
  $htmlOutHeader .= sprintf "}\n";
  $htmlOutHeader .= sprintf ".errorcolor {\n";
  $htmlOutHeader .= sprintf "  color:#FF0000;\n";
  $htmlOutHeader .= sprintf "}\n";
  $htmlOutHeader .= sprintf ".okbgcolor {\n";
  $htmlOutHeader .= sprintf "  background-color:#ceeebc;\n";
  $htmlOutHeader .= sprintf "}\n";
  $htmlOutHeader .= sprintf ".errorbgcolor {\n";
  $htmlOutHeader .= sprintf "  background-color:#ffcdcd;\n";
  $htmlOutHeader .= sprintf "}\n";
  $htmlOutHeader .= sprintf ".eefile {\n";
  $htmlOutHeader .= sprintf "  border: solid 1px #88c3ff;\n";
  $htmlOutHeader .= sprintf "  margin-bottom: 10px;\n";
  $htmlOutHeader .= sprintf "}\n";
  $htmlOutHeader .= sprintf ".title {\n";
  $htmlOutHeader .= sprintf "  background-color: #5a9fe5;\n";
  $htmlOutHeader .= sprintf "  font-weight: bold;\n";
  $htmlOutHeader .= sprintf "  padding: 5px;\n";
  $htmlOutHeader .= sprintf "  padding-left: 15px;\n";
  $htmlOutHeader .= sprintf "  font-size: 20px;\n";
  $htmlOutHeader .= sprintf "}\n";
  $htmlOutHeader .= sprintf ".package {\n";
  $htmlOutHeader .= sprintf "  background-color: #71b1f2;\n";
  $htmlOutHeader .= sprintf "  font-weight: bold;\n";
  $htmlOutHeader .= sprintf "  padding: 5px;\n";
  $htmlOutHeader .= sprintf "  padding-left: 15px;\n";
  $htmlOutHeader .= sprintf "  font-size: 20px;\n";
  $htmlOutHeader .= sprintf "}\n";
  $htmlOutHeader .= sprintf "table.summary {\n";
  $htmlOutHeader .= sprintf "  text-align: right;\n";
  $htmlOutHeader .= sprintf "  font-style: normal;\n";
  $htmlOutHeader .= sprintf "  font-size: small;\n";
  $htmlOutHeader .= sprintf "  border: 1;\n";
  $htmlOutHeader .= sprintf "  margin-top: 0em;\n";
  $htmlOutHeader .= sprintf "  margin-bottom: 0em;\n";
  $htmlOutHeader .= sprintf "  margin-left: 0em;\n";
  $htmlOutHeader .= sprintf "  margin-right: 0em;\n";
  $htmlOutHeader .= sprintf "  padding-top: 1em;\n";
  $htmlOutHeader .= sprintf "  padding-bottom: 1em;\n";
  $htmlOutHeader .= sprintf "  padding-left: 0em;\n";
  $htmlOutHeader .= sprintf "  padding-right: 0em;\n";
  $htmlOutHeader .= sprintf "  clear: left;\n";
  $htmlOutHeader .= sprintf "}\n";
  $htmlOutHeader .= sprintf "table.summary td {\n";
  $htmlOutHeader .= sprintf "  color: #000000;\n";
  $htmlOutHeader .= sprintf "  padding-top: 0em;\n";
  $htmlOutHeader .= sprintf "  padding-bottom: 0em;\n";
  $htmlOutHeader .= sprintf "  padding-left: 0.5em;\n";
  $htmlOutHeader .= sprintf "  padding-right: 0.5em;\n";
  $htmlOutHeader .= sprintf "}\n";
  $htmlOutHeader .= sprintf ".maintainer {\n";
  $htmlOutHeader .= sprintf "  text-align: right;\n";
  $htmlOutHeader .= sprintf "  font-size: 20px;\n";
  $htmlOutHeader .= sprintf "  background-color: #88c3ff;\n";
  $htmlOutHeader .= sprintf "  padding-right: 20px;\n";
  $htmlOutHeader .= sprintf "  padding-bottom: 1px;\n";
  $htmlOutHeader .= sprintf "}\n";
  $htmlOutHeader .= sprintf ".errorlist {\n";
  $htmlOutHeader .= sprintf "  text-align: left;\n";
  $htmlOutHeader .= sprintf "  background-color: #ffcdcd;\n";
  $htmlOutHeader .= sprintf "  padding-left: 20px;\n";
  $htmlOutHeader .= sprintf "  padding-top: 20px;\n";
  $htmlOutHeader .= sprintf "  padding-bottom: 1px;\n";
  $htmlOutHeader .= sprintf "}\n";
  $htmlOutHeader .= sprintf ".oklist {\n";
  $htmlOutHeader .= sprintf "  text-align: left;\n";
  $htmlOutHeader .= sprintf "  background-color: #ceeebc;\n";
  $htmlOutHeader .= sprintf "  padding-left: 20px;\n";
  $htmlOutHeader .= sprintf "  padding-top: 20px;\n";
  $htmlOutHeader .= sprintf "  padding-bottom: 1px;\n";
  $htmlOutHeader .= sprintf "}\n";
  $htmlOutHeader .= sprintf "</style>\n";
  $htmlOutHeader .= sprintf "</head>\n";
  $htmlOutHeader .= sprintf "<body>\n";
  $htmlOutHeader .= sprintf "<h1>%s</h1>\n", $title;

  my $htmlOutFooter = "";
  $htmlOutFooter .= sprintf "</body>\n";
  $htmlOutFooter .= sprintf "</html>\n";

  my $htmlOutTotal = $htmlOutHeader . $htmlOutBody . $htmlOutFooter;

  open (HTML, ">$OPT_OUTPUTDIR/messageid-check-result.html") || die "can't open file $OPT_OUTPUTDIR/messageid-check-result.html: $!";
  binmode HTML, ":utf8";
  printf HTML "%s", $htmlOutTotal;
  close (HTML);

}

sub download {
  if (mySystem("fakeroot apt-get update")) {
    printf (STDERR "“fakeroot apt-get update” didn’t work.\n");
    exit (1);
  }

  for my $eePackage (@eePackages) {
    if (mySystem("fakeroot apt-get -y --force-yes install $eePackage")) {
      printf (STDERR "“fakeroot apt-get -y --force-yes install $eePackage” didn’t work.\n");
      exit (1);
    }
    else {
      printf (STDOUT "“fakeroot apt-get -y --force-yes install $eePackage” OK.\n");
    }
  }

  if (-d "$OPT_HANDOFF_DIR") {
    rmtree ("$OPT_HANDOFF_DIR", {verbose => 1});
  }
  mkdir ("$OPT_HANDOFF_DIR") || die "Can’t mkdir $OPT_HANDOFF_DIR: $!\n";
  chdir ("$OPT_HANDOFF_DIR") || die "Can’t cd to $OPT_HANDOFF_DIR: $!\n";

  my $wgetCommand = "wget -nd -r -l1 ";
  if ($OPT_HTTP_USER ne "") {
    $wgetCommand .= "--http-user=$OPT_HTTP_USER ";
  }
  if ($OPT_HTTP_PASSWD ne "") {
    $wgetCommand .= "--http-passwd=$OPT_HTTP_PASSWD ";
  }
  $wgetCommand .= "$OPT_HANDOFF_URL";

  if (mySystem($wgetCommand)) {
    printf (STDERR "“wget $OPT_HANDOFF_URL” didn’t work.\n");
    myExit (1);
  }

  chdir $original_wd || die "Can’t cd to $original_wd: $!\n";

  @handoffFiles = glob ("$OPT_HANDOFF_DIR/*.ts");
  if ($#handoffFiles < 0) {
    printf (STDERR "download of handoff .ts files failed.\n");
    myExit(1);
  }

  # Convert handoff files mac2unix:
  for my $file (@handoffFiles) {
    printf(STDOUT "mac2unix %s\n", $file);
    my $fileContents = "";
    open (TS, "<:encoding(UTF-8)", "$file") || die "Can’t open file $file: $!";
    while(<TS>) {
      $ARG =~ s/\x{FEFF}//; # remove BOM
      $ARG =~ s/\r/\n/gi;   # replace returns with newlines
      $fileContents .= $ARG;
    }
    close (TS);
    open (TS, ">:encoding(UTF-8)", "$file") || die "Can’t open file $file: $!";
    printf(TS "%s", $fileContents);
    close (TS);
  }
}

sub readHandoffXmlTrees {
  for my $handoffFile (glob ("$OPT_HANDOFF_DIR/*.ts")) {
    my $xmlParser = new XML::Parser(Style => 'Tree', ProtocolEncoding => 'UTF-8');
    $handoffXmlTrees{$handoffFile} = $xmlParser->parsefile($handoffFile);
  }
}

sub checkMessageIdFromSourceAgainstHandoff {
  my ($eeFile, $eeMessageId, $htmlOutRef) = @_;
  my $eeMessageIdIsInSpecCount = 0;

  for my $handoffFile (@handoffFiles) {
    my $tree = $handoffXmlTrees{$handoffFile};
    my @tsTree = @{$tree->[1]};
    # print Dumper(@tsTree);
    my $extra_application_info = "";
    my $extra_ui_spec_document = "";
    my $extra_ts_date = "";
    my $extra_ts_macroversion = "";
    my @contextTree = ();
    for (my $i = 0; $i < $#tsTree; ++$i) {
    SWITCH: {
        if ($tsTree[$i] eq "extra-application-info") {
          $extra_application_info = $tsTree[$i+1][2];
          last SWITCH;
        }
        if ($tsTree[$i] eq "extra-uispec-document") {
          $extra_ui_spec_document = $tsTree[$i+1][2];
          last SWITCH;
        }
        if ($tsTree[$i] eq "extra-ts-date") {
          $extra_ts_date = $tsTree[$i+1][2];
          last SWITCH;
        }
        if ($tsTree[$i] eq "extra-ts-macroversion") {
          $extra_ts_macroversion = $tsTree[$i+1][2];
          last SWITCH;
        }
        if ($tsTree[$i] eq "context") {
          @contextTree = @{$tsTree[$i+1]};
          last SWITCH;
        }
      }
    }
    for (my $i = 0; $i < $#contextTree; ++$i) {
      if ($contextTree[$i] eq "message") {
        my @messageTree = @{$contextTree[$i+1]};
        my $messageId = $messageTree[0]{"id"};
        my $source = "";
        my $extracomment = "";
        for (my $j = 0; $j < $#messageTree; ++$j) {
        SWITCH: {
            if ($messageTree[$j] eq "source") {
              $source = $messageTree[$j+1][2];
              last SWITCH;
            }
            if ($messageTree[$j] eq "extracomment") {
              $extracomment = $messageTree[$j+1][2];
              last SWITCH;
            }
          }
        }
        if ($messageId eq $eeMessageId) {
          $eeMessageIdIsInSpecCount += 1;
          if ($OPT_VERBOSITY >= 1) {
            printf STDOUT "++++++OK: id “%s” spec “%s” (%s)\n",
              $eeMessageId, $extra_ui_spec_document,  myBasename($handoffFile);
          }
          ${$htmlOutRef} .= sprintf "<li>";
          ${$htmlOutRef} .= sprintf "%s found in spec “%s” (%s)",
            $eeMessageId, $extra_ui_spec_document,  myBasename($handoffFile);
          ${$htmlOutRef} .= sprintf "</li>\n";
        }
      }
    }
  }
  if ($eeMessageIdIsInSpecCount == 0) {
    if ($OPT_VERBOSITY >= 1) {
      printf STDOUT "***ERROR: id “%s” not found in spec\n", $eeMessageId;
    }
    ${$htmlOutRef} .= sprintf "<li>";
    ${$htmlOutRef} .= sprintf "%s", $eeMessageId;
    ${$htmlOutRef} .= sprintf "</li>\n";
  }

  return $eeMessageIdIsInSpecCount;
}

#----------------------------------------------------------------------
# "main":

# Process command line options
my %opt;
unless (GetOptions(\%opt,
		   'verbosity=i',        \$OPT_VERBOSITY,
		   'version',            \$OPT_VERSION,
		   'help|h',             \$OPT_HELP,
		   'eedir=s',            \$OPT_EEDIR,
                   'handoffurl=s',       \$OPT_HANDOFF_URL,
                   'handoffdir=s',       \$OPT_HANDOFF_DIR,
                   'http-user=s',        \$OPT_HTTP_USER,
                   'http-passwd=s',      \$OPT_HTTP_PASSWD,
                   'skip-download',      \$OPT_SKIP_DOWNLOAD,
                   'output-dir=s',       \$OPT_OUTPUTDIR,
		  )) {
  &usage ();
  exit 1;
}

if (!defined $OPT_VERBOSITY) {
  $OPT_VERBOSITY = 1;
}
if (!defined $OPT_VERSION) {
  $OPT_VERSION = 0;
}
if (!defined $OPT_HELP) {
  $OPT_HELP = 0;
}
if (!defined $OPT_EEDIR) {
  $OPT_EEDIR="/usr/share/l10n/meegotouch";
}
if (!defined $OPT_HANDOFF_URL) {
  $OPT_HANDOFF_URL="https://projects.maemo.org/svn/l10n/projects/harmattan/vendor/handoff/";
}
if (!defined $OPT_HANDOFF_DIR) {
  $OPT_HANDOFF_DIR="/tmp/handoff";
}
if (!defined $OPT_HTTP_USER) {
  $OPT_HTTP_USER="";
}
if (!defined $OPT_HTTP_PASSWD) {
  $OPT_HTTP_PASSWD="";
}
if (!defined $OPT_SKIP_DOWNLOAD) {
  $OPT_SKIP_DOWNLOAD = 0;
}
if (!defined $OPT_OUTPUTDIR) {
  $OPT_OUTPUTDIR = "$original_wd/messageid-check-results/";
}

if ($OPT_VERSION) {
  print "messageid-check $version\n";
  exit 0;
}

if ($OPT_HELP) {
  &usage ();
  exit 0;
}

if ($OPT_VERBOSITY >=1) {
  select (STDOUT);
  $OUTPUT_AUTOFLUSH = 1;
  select (STDERR);
  $OUTPUT_AUTOFLUSH = 1;
}

if (! -d $OPT_OUTPUTDIR) {
  mySystem("mkdir -p $OPT_OUTPUTDIR");
  if (! -d $OPT_OUTPUTDIR) {
    printf STDERR "Cannot create output directory %s", $OPT_OUTPUTDIR;
    myExit(1);
  }
}

if (!$OPT_SKIP_DOWNLOAD) {
  download();
}
else {
  @handoffFiles = glob ("$OPT_HANDOFF_DIR/*.ts");
}

readHandoffXmlTrees();

my $htmlOutToc = "";
my $htmlOutResultsDetail = "";
my $csvOut = "Invalid Message ID, Engineering English .qm file, Package, Package version, Package maintainer\n";

for my $eeFile (@eeFiles) {
  my $errorCount = 0;
  my $okCount = 0;
  my $debianPackage = qx(dpkg -S $eeFile);
  $debianPackage =~ s/:.*$//;
  chomp($debianPackage);
  my $debianPackageMaintainerFull = "Unknown &lt;unknown\@unknown.com%gt;";
  my $debianPackageMaintainerMail = "unknown\@unknown.com";
  my $debianPackageVersion = "";
  my $debianPackageDescription = "";
  open (STATUS, "dpkg -s $debianPackage |") || die "Can’t open dpkg -s $debianPackage | : $!";
  binmode STATUS, ":bytes";
  while (<STATUS>) {
    if ($ARG =~ /Maintainer:\s+(.+)$/) {
      $debianPackageMaintainerFull = $1;
      $debianPackageMaintainerFull =~ /<(.+)>/;
      $debianPackageMaintainerMail = $1;
      $debianPackageMaintainerFull =~ s/</&lt;/;
      $debianPackageMaintainerFull =~ s/>/&gt;/;
    }
    if ($ARG =~ /Version:\s+(.+)$/) {
      $debianPackageVersion = $1;
    }
    if ($ARG =~ /Description:\s+(.+)$/) {
      $debianPackageDescription = $1;
    }
  }
  my $dpkgStatusDetails = qx(dpkg -s $debianPackage);
  if ($OPT_VERBOSITY >= 1) {
    printf STDOUT "------------------------------------------------------------\n";
    printf STDOUT "checking “%s” from package “%s”\n", $eeFile, $debianPackage;
  }

  my $htmlOutOkList = "";
  my $htmlOutErrorList = "";

  my $xmlParser = new XML::Parser(Style => 'Tree');
  open (EEFILE, "lconvert -o - -i $eeFile |") || die "Can’t open file lconvert $eeFile | : $!";
  my $tree = $xmlParser->parse(*EEFILE, ProtocolEncoding => 'UTF-8');
  close(EEFILE);
  my @contextTree = @{$tree->[1][4]};
  for (my $i = 0; $i < $#contextTree; ++$i) {
    if ($contextTree[$i] eq "message") {
      my $source = $contextTree[$i+1][4][2];
      my $htmlOutMessage = "";
      my $eeMessageIdIsInSpecCount =
        checkMessageIdFromSourceAgainstHandoff($eeFile, $source, \$htmlOutMessage);
      if ($eeMessageIdIsInSpecCount >= 1) {
        ++$okCount;
        $htmlOutOkList .= $htmlOutMessage;
      }
      else {
        ++$errorCount;
        ++$totalNumberOfIdsNotFoundInSpec;
        $htmlOutErrorList .= $htmlOutMessage;
        $csvOut .= "$source,$eeFile,$debianPackage,$debianPackageVersion,$debianPackageMaintainerMail\n";
      }
    }
  }
  $htmlOutResultsDetail .= sprintf "<div class=\"eefile\">\n";
  $htmlOutResultsDetail .= sprintf "<div class=\"title\">";
  $htmlOutResultsDetail .= sprintf "<a href=\"#%s-ref\" name=\"%s\">", $eeFile, $eeFile;
  $htmlOutResultsDetail .= sprintf "%s", $eeFile;
  $htmlOutResultsDetail .= sprintf "</a>";
  $htmlOutResultsDetail .= sprintf " IDs in spec: ";
  $htmlOutResultsDetail .= sprintf "<span class=\"okcolor\">";
  $htmlOutResultsDetail .= sprintf "%d", $okCount;
  $htmlOutResultsDetail .= sprintf "</span>";
  $htmlOutResultsDetail .= sprintf " Invalid IDs: ";
  $htmlOutResultsDetail .= sprintf "<span class=\"errorcolor\">";
  $htmlOutResultsDetail .= sprintf "%d", $errorCount;
  $htmlOutResultsDetail .= sprintf "</span>";
  $htmlOutResultsDetail .= sprintf "</div>\n";
  $htmlOutResultsDetail .= sprintf "<div class=\"package\">";
  $htmlOutResultsDetail .= sprintf "%s %s", $debianPackage, $debianPackageVersion;
  $htmlOutResultsDetail .= sprintf "</div>\n";
  $htmlOutResultsDetail .= sprintf "<div class=\"maintainer\">";
  $htmlOutResultsDetail .= sprintf "<a href=\"mailto:%s\">%s</a>",
    $debianPackageMaintainerMail, $debianPackageMaintainerFull;
  $htmlOutResultsDetail .= sprintf "</div>\n";
  if ($errorCount > 0) {
    $htmlOutResultsDetail .= sprintf "<div class=\"errorlist\">\n";
    $htmlOutResultsDetail .= sprintf "List of invalid IDs not found in the UI specs:\n";
    $htmlOutResultsDetail .= sprintf "<ul>\n";
    $htmlOutResultsDetail .= $htmlOutErrorList;
    $htmlOutResultsDetail .= sprintf "</ul>\n";
    $htmlOutResultsDetail .= sprintf "</div>\n";
  }
  if ($okCount > 0) {
    $htmlOutResultsDetail .= sprintf "<div class=\"oklist\">\n";
    $htmlOutResultsDetail .= sprintf "List of IDs found in the UI specs:\n";
    $htmlOutResultsDetail .= sprintf "<ul>\n";
    $htmlOutResultsDetail .= $htmlOutOkList;
    $htmlOutResultsDetail .= sprintf "</ul>\n";
    $htmlOutResultsDetail .= sprintf "</div>\n";
  }
  $htmlOutResultsDetail .= sprintf "</div>\n";

  # Table of Contents:
  $htmlOutToc .= sprintf "<tr>\n";
  if ($errorCount != 0) {
    $htmlOutToc .= sprintf "<td class=\"errorbgcolor\">\n";
  }
  else {
    $htmlOutToc .= sprintf "<td class=\"okbgcolor\">\n";
  }
  $htmlOutToc .= sprintf "%s", $debianPackage;
  $htmlOutToc .= sprintf "</td>\n";
  if ($errorCount != 0) {
    $htmlOutToc .= sprintf "<td class=\"errorbgcolor\">\n";
  }
  else {
    $htmlOutToc .= sprintf "<td class=\"okbgcolor\">\n";
  }
  $htmlOutToc .= sprintf "%s", $debianPackageVersion;
  $htmlOutToc .= sprintf "</td>\n";
  if ($errorCount != 0) {
    $htmlOutToc .= sprintf "<td class=\"errorbgcolor\">\n";
  }
  else {
    $htmlOutToc .= sprintf "<td class=\"okbgcolor\">\n";
  }
  $htmlOutToc .= sprintf "<a href=\"#%s\" name=\"%s-ref\">%s</a>: ",
    $eeFile, $eeFile, myBasename($eeFile);
  $htmlOutToc .= sprintf "</td>\n";
  $htmlOutToc .= sprintf "<td class=\"okbgcolor\">\n";
  $htmlOutToc .= sprintf "%d", $okCount;
  $htmlOutToc .= sprintf "</td>\n";
  if ($errorCount != 0) {
    $htmlOutToc .= sprintf "<td class=\"errorbgcolor\">\n";
  }
  else {
    $htmlOutToc .= sprintf "<td class=\"okbgcolor\">\n";
  }
  $htmlOutToc .= sprintf "%d", $errorCount;
  $htmlOutToc .= sprintf "</td>\n";
  $htmlOutToc .= sprintf "</tr>\n";
}

$htmlOutToc .= sprintf "</table>\n";
$htmlOutToc .= sprintf "</center>\n";

my $htmlOutTocHeader = "";
$htmlOutTocHeader .= sprintf "<hr>\n";
$htmlOutTocHeader .= sprintf "<h2>Summary of results:</h2>\n";
if ($totalNumberOfIdsNotFoundInSpec != 0) {
  $htmlOutTocHeader .= sprintf "<span class=\"errorcolor\">";
}
else {
  $htmlOutTocHeader .= sprintf "<span class=\"okcolor\">";
}
$htmlOutTocHeader .= sprintf "<p><b>Total number of Ids not found in the specification: %d</b></p>",
        $totalNumberOfIdsNotFoundInSpec;
$htmlOutTocHeader .= sprintf "</span>";

$htmlOutTocHeader .= sprintf "<p>";
$htmlOutTocHeader .= sprintf "<a href=\"messageid-check-result.csv\">";
$htmlOutTocHeader .= sprintf "CVS file with a list of all invalid message IDs.";
$htmlOutTocHeader .= sprintf "</a>";
$htmlOutTocHeader .= sprintf "</p>";

$htmlOutTocHeader .= sprintf "<center>";
$htmlOutTocHeader .= sprintf "<table class=\"summary\">\n";
$htmlOutTocHeader .= sprintf "<caption style=\"caption-side:top\">Overview of the number of IDs found or not found in the specifications. Click on the file name of the .qm file for details.</caption>\n";
$htmlOutTocHeader .= sprintf "<tr>";
$htmlOutTocHeader .= sprintf "<th>";
$htmlOutTocHeader .= sprintf "Debian package name";
$htmlOutTocHeader .= sprintf "</th>";
$htmlOutTocHeader .= sprintf "<th>";
$htmlOutTocHeader .= sprintf "version";
$htmlOutTocHeader .= sprintf "</th>";
$htmlOutTocHeader .= sprintf "<th>";
$htmlOutTocHeader .= sprintf "Engineering English .qm file";
$htmlOutTocHeader .= sprintf "</th>";
$htmlOutTocHeader .= sprintf "<th>";
$htmlOutTocHeader .= sprintf "IDs in spec";
$htmlOutTocHeader .= sprintf "</th>";
$htmlOutTocHeader .= sprintf "<th>";
$htmlOutTocHeader .= sprintf "Invalid IDs";
$htmlOutTocHeader .= sprintf "</th>";
$htmlOutTocHeader .= sprintf "</tr>";

my $htmlOutResultsDetailHeader = "";
$htmlOutResultsDetailHeader .= "<hr>\n";
$htmlOutResultsDetailHeader .= sprintf "<h2>Results in detail:</h2>\n";

my $htmlOutIntroduction ="";
$htmlOutIntroduction .= sprintf "<hr>\n";
$htmlOutIntroduction .= sprintf "<h2>Introduction</h2>\n";

$htmlOutIntroduction .= sprintf "This page lists IDs which are used in
the code but which are missing in the specifications. For all IDs used
in the code, but not defined in the UI specifications, please do the
following:\n";

$htmlOutIntroduction .= sprintf "<ol>\n";
$htmlOutIntroduction .= sprintf "<li>Check your code if those IDs are really in use</li>\n";
$htmlOutIntroduction .= sprintf "<li>Check if there is a typo in the ID</li>\n";
$htmlOutIntroduction .= sprintf "</ol>\n";

$htmlOutIntroduction .= sprintf "If there is no typo and the ID is
really used, open a bug against the relevant UI Spec requesting a new
ID: <ul><li>component: Specifications</li> <li>Keywords: l10n, PO</li>
<li>CC: <a href=\"mailto:oksan.savasoglu-niemi\@nokia.com\">Oksan
Savasoglu-Niemi</a></li></ul>";
  
my $htmlOutBody =
  $htmlOutIntroduction
  . $htmlOutTocHeader
  . $htmlOutToc
  . $htmlOutResultsDetailHeader
  . $htmlOutResultsDetail;

writeHtml($htmlOutBody);

open (CSV, ">$OPT_OUTPUTDIR/messageid-check-result.csv") || die "can't open file $OPT_OUTPUTDIR/messageid-check-result.csv: $!";
binmode CSV, ":utf8";
printf CSV "%s", $csvOut;
close (CSV);

myExit (0);
