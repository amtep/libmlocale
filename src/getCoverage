#! /usr/bin/perl

my @files = ();

my $valid=90.0;
my $gcovDir = ".gcov";

my @subDirs = ( "." );

push @subDirs, getSubdirs();

foreach $subDir ( @subDirs ) {
    push @files, <$subDir/*.cpp>;
    push @files, <$subDir/*.h>;
}

my %total = ();
my %percentages = ();
my %lines = ();
my %maxLen = ();

$maxLen{ "files" } = length( "File" );
$maxLen{ "%" }     = length( "%" );
$maxLen{ "lines" } = length( "Lines" );

$numArgs = $#ARGV + 1;
$xml = 0;

if ($numArgs == 2 && $ARGV[0] == "-xml" ) {
    $xml = 1;
    $filename = $ARGV[1];
    open(OUT,">$filename") or die("Cant open $filename for writing!");
    printf("Create coverage log $filename ... \n");
} elsif ($numArgs == 0) {
    $xml = 0;
} else {
    die("Danger danger will robinson!")
}

foreach $file ( @files ) {
    my $filterNextLine = 0;
    my $gcovCommand = "gcov --object-directory .obj $file 2>/dev/null";
    open( GCOV, "$gcovCommand|" ) || die( "Could not open $gcovCommand: $!" );
    while ( <GCOV> ) {
        chomp;
        if  ( ( $filterNextLine ) && ( /Lines executed:(\S+) of (\S+)/ ) ) {
            $percentages{ $file } = $1;
            $lines{ $file } = $2;

            $total{"%"}+=$percentages{ $file };
            $total{"lines"}+=$lines{ $file };
            $total{"files"}++;
            setMaxLen( "%", length( $percentages{ $file } ) );
            setMaxLen( "lines", length( $lines{ $file } ) );
            setMaxLen( "files", length( $file ) );

            last;
        }
        $filterNextLine = ( /File \'$file\'/ );
    }
    close( GCOV );

}

# tidy up
mkdir $gcovDir if ( ! -d $gcovDir );
foreach $file ( <*.gcov> ) {
    rename( $file, ".gcov/$file" );
}

# print out table
#

if ($xml) {
    print OUT sprintf("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n");
    print OUT sprintf("<TestCase name=\"Coverage\">\n");
    print OUT sprintf("<Environment>\n");
    print OUT sprintf("<QtVersion>4.5.0</QtVersion>\n");
    print OUT sprintf("    <QTestVersion>4.5.0</QTestVersion>\n");
    print OUT sprintf("</Environment>\n");

    printTestFunction("initTestCase","",100);

} else {
    printf( "    %-*s %*s %*s\n", $maxLen{ "files" }, "File", $maxLen{ "%" }, "%", $maxLen{ "lines" }, "Lines" );
}

my @groups = ();

my $counter = 1;
foreach $file ( @files ) {
    if ( $lines{ $file } > 0 ) {
        if ($xml ) {
            printTestFunction("Line Coverage of $file",$file,$percentages{$file});
        } else {
            printf( "%3d ", $counter );
            printf( "%-*s ", $maxLen{ "files" }, $file );
            printf( "%*s ", $maxLen{ "%" }, $percentages{ $file } );
            printf( "%*s", $maxLen{ "lines" }, $lines{ $file } );
            printf( "\n" );

            my ( $group, $filename ) = split( /\//, $file );
            push @groups, $group if ( !grep( /$group/, @groups ) );
            $total{ "%$group" } += $percentages{ $file };
            $total{ "lines$group" } += $lines{ $file };
            $total{ "files$group" } ++;
        }
        $counter++;
    }
}

# print out totals
{
    if ($xml) {
        printTestFunction("Total Coverage","",$total{ "%" }/$total{ "files" });
        printTestFunction("cleanupTestCase","",100);
        print OUT sprintf("</TestCase>\n");
    } else {
        print "Total lines=", $total{ "lines" }, "\n";
        printf( "Mean percentage=%2.2f\%\n", ($total{ "files" }==0)?"0":($total{ "%" }/$total{ "files" }) );
    }

    print "\n";
    print "Mean percentages by subdirectory\n";
    foreach my $group ( @groups ) {
        printf(
            "%s(%d)\t%6s\%\n",
            $group, $total{ "files$group" },
            sprintf( "%.2f", $total{ "%$group" }/$total{ "files$group" } )
        );
    }
}

close(OUT);

sub printTestFunction
{
    my ( $testname, $filename, $percentage ) = @_;
    local $pass = $percentage>=$valid;

    print OUT sprintf("<TestFunction name=\"%s\">\n",$testname);
    print OUT sprintf("<Incident type=\"%s\" file=\"%s\" line=\"0\" %s>\n", $pass?"pass":"fail",$filename, $pass?"/":"");
    if (not $pass) {
        print OUT sprintf("<Description><![CDATA[%s]]></Description>\n","Coverage ($percentage) below set $valid%");
        print OUT sprintf("</Incident>\n");
    }
    print OUT sprintf("</TestFunction>\n");

}
sub setMaxLen
{
    my ( $field, $length ) = @_;

    $maxLen{ $field } = $length if ( defined( $maxLen{ $field } ) && $length > $maxLen{ $field } );
}

sub getSubdirs
{
    my @retVal = ();
    my $projectFile = "src.pro";

    open( PROJECT, "<$projectFile" ) || die( "Could not open $projectFile:$!" );
    while (<PROJECT>) {
        if ( /include\s*\((\w+)\/\w+.pri\)/ ) {
            push @retVal, $1;
        }
    }
    close( PROJECT );

    return @retVal;
}
