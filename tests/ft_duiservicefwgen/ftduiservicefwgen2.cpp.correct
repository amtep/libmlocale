/*
 * automatically generated with the command line :
 * /usr/bin/dui-servicefwgen -p /home/holger/hx86/master/libdui/libdui/tests/ft_duiservicefwgen/com.nokia.FtDuiServiceFwGen2
 */

#include "ftduiservicefwgen2.h"

bool FtDuiServiceFwGen2::showGridWithCapturedContent( int limit )
{
    return qobject_cast<FtDuiServiceFwGen2Proxy*>(interfaceProxy)->showGridWithCapturedContent( limit ).value();
}

void FtDuiServiceFwGen2::showImage( const QString &uri, const QStringList &uriList )
{
    static_cast<FtDuiServiceFwGen2Proxy*>(interfaceProxy)->showImage( uri, uriList );
}

bool FtDuiServiceFwGen2::showImage( const QString &uri, const QString &playlistName, const QString &defaultBackPage )
{
    return qobject_cast<FtDuiServiceFwGen2Proxy*>(interfaceProxy)->showImage( uri, playlistName, defaultBackPage ).value();
}

bool FtDuiServiceFwGen2::showPage( const QString &targetPage, const QString &previousPage )
{
    return qobject_cast<FtDuiServiceFwGen2Proxy*>(interfaceProxy)->showPage( targetPage, previousPage ).value();
}

bool FtDuiServiceFwGen2::showSettings(  )
{
    return qobject_cast<FtDuiServiceFwGen2Proxy*>(interfaceProxy)->showSettings(  ).value();
}

FtDuiServiceFwGen2::FtDuiServiceFwGen2( const QString& preferredService, QObject* parent )
    : DuiServiceFwBaseIf( FtDuiServiceFwGen2Proxy::staticInterfaceName(), parent )
{
    // Resolve the provider service name
    service = resolveServiceName( interface, preferredService );

    bool serviceNameInvalid = service.contains( " " ); // "not provided" - when the service wouldn't run
    if ( serviceNameInvalid ) {
        service.clear();
    }

    if (!service.isEmpty()) {
        // Construct the D-Bus proxy
        interfaceProxy = new FtDuiServiceFwGen2Proxy( service, "/", QDBusConnection::sessionBus(), this );
        // allConnectSignals go here (empty block if none)

    }
}

void FtDuiServiceFwGen2::setService(const QString & service)
{
    if (service.isEmpty()) return;

    this->service = service;

    if ( interfaceProxy ) {
        delete interfaceProxy;
        interfaceProxy = 0;
    }
    interfaceProxy = new FtDuiServiceFwGen2Proxy( service, "/", QDBusConnection::sessionBus(), this );
    {

    }
}

