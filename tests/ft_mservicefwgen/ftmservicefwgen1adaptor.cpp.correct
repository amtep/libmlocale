/*
 * automatically generated with the command line :
 * /home/davidmaxwaterman/z/hi386/bug172441/tools/m-servicefwgen -a /home/davidmaxwaterman/z/hi386/bug172441/tests/ft_mservicefwgen/com.nokia.FtMServiceFwGen1
 *
 * /home/davidmaxwaterman/z/hi386/bug172441/tools/m-servicefwgen is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "ftmservicefwgen1adaptor.h"

#include <MApplication>
#include <MApplicationPage>
#include <MApplicationWindow>
#include <MEscapeButtonPanel>
#include <MDebug>

#ifdef Q_WS_X11
#include <QX11Info>
#include <X11/Xutil.h>
#include <X11/Xlib.h>
#include <X11/Xatom.h>
#include <X11/Xmd.h>
#endif // Q_WS_X11

#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class FtMServiceFwGen1Adaptor
 */

FtMServiceFwGen1Adaptor::FtMServiceFwGen1Adaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent),
    backServiceName(),
    windowId(-1)
{
    // constructor
    setAutoRelaySignals(true);
}

FtMServiceFwGen1Adaptor::~FtMServiceFwGen1Adaptor()
{
    // destructor
}

void FtMServiceFwGen1Adaptor::bug172441(const QString &backServiceName, const QString &windowTitle, const uint windowId)
{
    this->windowId = windowId;
    this->backServiceName = backServiceName;

    // handle method call com.nokia.fakegalleryserviceinterface.bug172441
    QMetaObject::invokeMethod(parent(), "bug172441");

    MApplicationWindow *appWindow = MApplication::activeApplicationWindow();
    if (appWindow != 0) {
        appWindow->setWindowTitle( windowTitle );

        MApplicationPage *currentPage = appWindow->currentPage();

        if ( currentPage != 0 ) {
            currentPage->setEscapeMode( MApplicationPageModel::EscapeManualBack );
            // connect to the back button - assumes the above 'showImage' opens a
            // new window and so the window referred to below is already the top one
            connect(currentPage, SIGNAL(backButtonClicked()),
                this, SLOT(goBack()));
        } else {
            mDebug( __PRETTY_FUNCTION__ ) <<  "No currentPage! - broken chain";
        }
    } else {
        mDebug( __PRETTY_FUNCTION__ ) << "No activeApplicationWindow! - broken chain";
    }

#ifdef Q_WS_X11
    // update the X server
    {
        XPropertyEvent p;
        p.send_event = True;
        p.display = QX11Info::display();
        p.type   = PropertyNotify;
        p.window = RootWindow(p.display, 0);
        p.atom   = XInternAtom(p.display, "_NET_CLIENT_LIST", False);
        p.state  = PropertyNewValue;
        p.time   = CurrentTime;
        XSendEvent(p.display, p.window, False, PropertyChangeMask,
                (XEvent*)&p);

        XSync(QX11Info::display(), False);
    }
#endif // Q_WS_X11

}

bool FtMServiceFwGen1Adaptor::showGridWithCapturedContent(int limit)
{
    // handle method call com.nokia.fakegalleryserviceinterface.showGridWithCapturedContent
    bool out0;
    QMetaObject::invokeMethod(parent(), "showGridWithCapturedContent", Q_RETURN_ARG(bool, out0), Q_ARG(int, limit));
    return out0;
}

bool FtMServiceFwGen1Adaptor::showImage(const QString &uri, const QString &playlistName, const QString &defaultBackPage)
{
    // handle method call com.nokia.fakegalleryserviceinterface.showImage
    bool out0;
    QMetaObject::invokeMethod(parent(), "showImage", Q_RETURN_ARG(bool, out0), Q_ARG(QString, uri), Q_ARG(QString, playlistName), Q_ARG(QString, defaultBackPage));
    return out0;
}

void FtMServiceFwGen1Adaptor::showImage(const QString &backServiceName, const QString &windowTitle, const uint windowId, const QString &uri, const QStringList &uriList)
{
    this->windowId = windowId;
    this->backServiceName = backServiceName;

    // handle method call com.nokia.fakegalleryserviceinterface.showImage
    QMetaObject::invokeMethod(parent(), "showImage", Q_ARG(QString, uri), Q_ARG(QStringList, uriList));

    MApplicationWindow *appWindow = MApplication::activeApplicationWindow();
    if (appWindow != 0) {
        appWindow->setWindowTitle( windowTitle );

        MApplicationPage *currentPage = appWindow->currentPage();

        if ( currentPage != 0 ) {
            currentPage->setEscapeMode( MApplicationPageModel::EscapeManualBack );
            // connect to the back button - assumes the above 'showImage' opens a
            // new window and so the window referred to below is already the top one
            connect(currentPage, SIGNAL(backButtonClicked()),
                this, SLOT(goBack()));
        } else {
            mDebug( __PRETTY_FUNCTION__ ) <<  "No currentPage! - broken chain";
        }
    } else {
        mDebug( __PRETTY_FUNCTION__ ) << "No activeApplicationWindow! - broken chain";
    }

#ifdef Q_WS_X11
    // update the X server
    {
        XPropertyEvent p;
        p.send_event = True;
        p.display = QX11Info::display();
        p.type   = PropertyNotify;
        p.window = RootWindow(p.display, 0);
        p.atom   = XInternAtom(p.display, "_NET_CLIENT_LIST", False);
        p.state  = PropertyNewValue;
        p.time   = CurrentTime;
        XSendEvent(p.display, p.window, False, PropertyChangeMask,
                (XEvent*)&p);

        XSync(QX11Info::display(), False);
    }
#endif // Q_WS_X11

}

bool FtMServiceFwGen1Adaptor::showPage(const QString &targetPage, const QString &previousPage)
{
    // handle method call com.nokia.fakegalleryserviceinterface.showPage
    bool out0;
    QMetaObject::invokeMethod(parent(), "showPage", Q_RETURN_ARG(bool, out0), Q_ARG(QString, targetPage), Q_ARG(QString, previousPage));
    return out0;
}

bool FtMServiceFwGen1Adaptor::showSettings()
{
    // handle method call com.nokia.fakegalleryserviceinterface.showSettings
    bool out0;
    QMetaObject::invokeMethod(parent(), "showSettings", Q_RETURN_ARG(bool, out0));
    return out0;
}

void FtMServiceFwGen1Adaptor::goBack()
{
    bool backServiceRegistered = ( windowId != -1 );
    if ( backServiceRegistered ) {
#ifdef Q_WS_X11
        Display *display = QX11Info::display();

        // raise and activate window
        {
            XEvent ev;
            memset(&ev, 0, sizeof(ev));

            Window rootWin = QX11Info::appRootWindow(QX11Info::appScreen());

            ev.xclient.type         = ClientMessage;
            ev.xclient.window       = windowId;
            ev.xclient.message_type = XInternAtom(
                    display,
                    "_NET_ACTIVE_WINDOW",
                    True);
            ev.xclient.format       = 32;
            ev.xclient.data.l[0]    = 1;
            ev.xclient.data.l[1]    = CurrentTime;
            ev.xclient.data.l[2]    = 0;

            XSendEvent(display,  rootWin, False, StructureNotifyMask, &ev);
#endif // Q_WS_X11
        }

        // unhide the chain parent's window
        {
            // Tell the window to not to be shown in the switcher
#ifdef Q_WS_X11
            XDeleteProperty(display, windowId, XInternAtom(display, "_NET_WM_STATE", False));
            XSync(display, False);
#endif // Q_WS_X11
        }

        MApplicationWindow *appWindow = MApplication::activeApplicationWindow();
        if ( appWindow != 0 ) {
            appWindow->close();
        }
    } else {
        qWarning() << "backService is not registered: not going back";
    }
}
